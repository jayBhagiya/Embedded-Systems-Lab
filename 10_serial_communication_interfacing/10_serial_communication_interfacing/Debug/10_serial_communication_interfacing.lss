
10_serial_communication_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092f  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000656  00000000  00000000  00000b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  000011ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f4  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 00 	call	0x126	; 0x126 <main>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:
	return;
}

void LCD_cmd(unsigned char cmd)
{
	LCD_DATA=cmd;
  6c:	8b bb       	out	0x1b, r24	; 27
	ctrl =(0<<rs)|(0<<rw)|(1<<en);
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f ec       	ldi	r24, 0xCF	; 207
  74:	97 e0       	ldi	r25, 0x07	; 7
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <LCD_cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <LCD_cmd+0x10>
  7c:	00 00       	nop
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);
  7e:	18 ba       	out	0x18, r1	; 24
  80:	9f e7       	ldi	r25, 0x7F	; 127
  82:	28 e3       	ldi	r18, 0x38	; 56
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	91 50       	subi	r25, 0x01	; 1
  88:	20 40       	sbci	r18, 0x00	; 0
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <LCD_cmd+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <LCD_cmd+0x24>
  90:	00 00       	nop
  92:	08 95       	ret

00000094 <init_LCD>:
	return 0;
}

void init_LCD(void)
{
	LCD_cmd(0x38); // initialization of 16X2 LCD in 8bit mode
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <init_LCD+0xa>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <init_LCD+0x10>
  a4:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x01); // clear LCD
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
  ac:	8f ec       	ldi	r24, 0xCF	; 207
  ae:	97 e0       	ldi	r25, 0x07	; 7
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <init_LCD+0x1c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <init_LCD+0x22>
  b6:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x0E); // cursor ON
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <init_LCD+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <init_LCD+0x34>
  c8:	00 00       	nop
	_delay_ms(1);
	
	LCD_cmd(0x80); // ---8 go to first line and --0 is for 0th position
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <init_LCD+0x40>
  d8:	00 c0       	rjmp	.+0      	; 0xda <init_LCD+0x46>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <LCD_write>:
	return;
}

void LCD_write(unsigned char data)
{
	LCD_DATA= data;
  de:	8b bb       	out	0x1b, r24	; 27
	ctrl = (1<<rs)|(0<<rw)|(1<<en);
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_write+0xa>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_write+0x10>
  ee:	00 00       	nop
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	9f e7       	ldi	r25, 0x7F	; 127
  f6:	28 e3       	ldi	r18, 0x38	; 56
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <LCD_write+0x1c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_write+0x26>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <usart_init>:
	return ;
}

void usart_init()
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
 108:	8a b1       	in	r24, 0x0a	; 10
 10a:	88 61       	ori	r24, 0x18	; 24
 10c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1);
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	8e 68       	ori	r24, 0x8E	; 142
 112:	80 bd       	out	0x20, r24	; 32
	// Use 8-bit character sizes
	
	UBRRL = BAUD_PRESCALE;
 114:	83 e3       	ldi	r24, 0x33	; 51
 116:	89 b9       	out	0x09, r24	; 9
	// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 118:	10 bc       	out	0x20, r1	; 32
 11a:	08 95       	ret

0000011c <usart_getch>:
	// into the high byte of the UBRR register
}

unsigned int usart_getch()
{
	while ((UCSRA & (1 << RXC)) == 0);
 11c:	5f 9b       	sbis	0x0b, 7	; 11
 11e:	fe cf       	rjmp	.-4      	; 0x11c <usart_getch>
	// Do nothing until data has been received and is ready to be read from UDR
	return(UDR); // return the byte
 120:	8c b1       	in	r24, 0x0c	; 12
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <main>:
unsigned int usart_getch();

int main()
{
	unsigned char value;
	DDRA=0xff; // LCD_DATA port as output port
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x07; // signal as out put
 12a:	87 e0       	ldi	r24, 0x07	; 7
 12c:	87 bb       	out	0x17, r24	; 23
	init_LCD(); //initialization of LCD
 12e:	0e 94 4a 00 	call	0x94	; 0x94 <init_LCD>
 132:	2f e7       	ldi	r18, 0x7F	; 127
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x12>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x1c>
 142:	00 00       	nop
	_delay_ms(50); // delay of 50 milli seconds
	usart_init(); // initialization of USART
 144:	0e 94 84 00 	call	0x108	; 0x108 <usart_init>
	while(1)
	{
		value=usart_getch(); // Call a function to get data from serial port
 148:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_getch>
 14c:	c8 2f       	mov	r28, r24
		LCD_cmd(0xC0); // to go in second line and zeroth  position on LCD
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
		LCD_write(value); // write data to LCD
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 6f 00 	call	0xde	; 0xde <LCD_write>
 15a:	f6 cf       	rjmp	.-20     	; 0x148 <main+0x22>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
