
Two_Seven_Segment_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000645  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a0  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000117  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#endif
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
  9a:	8a bb       	out	0x1a, r24	; 26
    
	char array[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE0, 0xFE, 0xF6};
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	de 01       	movw	r26, r28
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	01 90       	ld	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	8a 95       	dec	r24
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
	int tenth_num = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	04 c0       	rjmp	.+8      	; 0xbc <main+0x3a>
	while (1) 
    {
		PORTB = array[tenth_num++];
  b4:	ca 01       	movw	r24, r20
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x3a>
			PORTA = array[i];
			_delay_ms(500);
		}
		
		if(tenth_num == 10)
			tenth_num = 0;
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
    
	char array[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE0, 0xFE, 0xF6};
	int tenth_num = 0;
	while (1) 
    {
		PORTB = array[tenth_num++];
  bc:	ac 01       	movw	r20, r24
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	e1 e0       	ldi	r30, 0x01	; 1
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ec 0f       	add	r30, r28
  c8:	fd 1f       	adc	r31, r29
  ca:	e8 0f       	add	r30, r24
  cc:	f9 1f       	adc	r31, r25
  ce:	80 81       	ld	r24, Z
  d0:	88 bb       	out	0x18, r24	; 24
		
		for(int i=0; i<10; i++)
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	12 c0       	rjmp	.+36     	; 0xfc <main+0x7a>
		{
			PORTA = array[i];
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	e8 0f       	add	r30, r24
  e2:	f9 1f       	adc	r31, r25
  e4:	20 81       	ld	r18, Z
  e6:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	39 e6       	ldi	r19, 0x69	; 105
  ec:	68 e1       	ldi	r22, 0x18	; 24
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x76>
  f8:	00 00       	nop
	int tenth_num = 0;
	while (1) 
    {
		PORTB = array[tenth_num++];
		
		for(int i=0; i<10; i++)
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	8a 30       	cpi	r24, 0x0A	; 10
  fe:	91 05       	cpc	r25, r1
 100:	5c f3       	brlt	.-42     	; 0xd8 <main+0x56>
		{
			PORTA = array[i];
			_delay_ms(500);
		}
		
		if(tenth_num == 10)
 102:	4a 30       	cpi	r20, 0x0A	; 10
 104:	51 05       	cpc	r21, r1
 106:	b1 f6       	brne	.-84     	; 0xb4 <main+0x32>
 108:	d7 cf       	rjmp	.-82     	; 0xb8 <main+0x36>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
