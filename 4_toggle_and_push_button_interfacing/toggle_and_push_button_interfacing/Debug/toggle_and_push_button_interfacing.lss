
toggle_and_push_button_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2e  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bfb  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000403  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f4  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2c d0       	rcall	.+88     	; 0x14e <main>
  f6:	50 c0       	rjmp	.+160    	; 0x198 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <toggle_and_push_button_switch_config>:
 * @brief      Function to make **ONLY** Toggle and push button Switch pin as input and pull it up internally
 */
void toggle_and_push_button_switch_config (void) {

	// Make **ONLY** Toogle Switch pin as input
	toggle_button_ddr_reg &= ~( 1 << toggle_button_pin );
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	80 bb       	out	0x10, r24	; 16

	// Make **ONLY** Toggle Switch pin internally pull-up	
	toggle_button_port_reg |= ( 1 << toggle_button_pin );
 100:	81 b3       	in	r24, 0x11	; 17
 102:	82 60       	ori	r24, 0x02	; 2
 104:	81 bb       	out	0x11, r24	; 17
	
	// Make **ONLY** Push button Switch pin as input
	push_button_ddr_reg &= ~( 1 << push_button_pin );
 106:	80 b3       	in	r24, 0x10	; 16
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	80 bb       	out	0x10, r24	; 16

	// Make **ONLY** Push button Switch pin internally pull-up
	push_button_port_reg |= ( 1 << push_button_pin );
 10c:	81 b3       	in	r24, 0x11	; 17
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	81 bb       	out	0x11, r24	; 17
 112:	08 95       	ret

00000114 <led_pin_config>:
 * @brief      Function to make **ONLY** 'led_1_pin' and 'led_2_pin' as output and initially set it to low
 */
void led_pin_config (void) {

	// Make 'led_1_pin' as output
	led_ddr_reg	|= ( 1 << led_1_pin );
 114:	81 b1       	in	r24, 0x01	; 1
 116:	81 60       	ori	r24, 0x01	; 1
 118:	81 b9       	out	0x01, r24	; 1
	
	// Set 'led_1_pin' to low initially
	led_port_reg &= ~( 1 << led_1_pin );
 11a:	82 b1       	in	r24, 0x02	; 2
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	82 b9       	out	0x02, r24	; 2
	
	// Make 'led_2_pin' as output
	led_ddr_reg	|= ( 1 << led_2_pin );
 120:	81 b1       	in	r24, 0x01	; 1
 122:	82 60       	ori	r24, 0x02	; 2
 124:	81 b9       	out	0x01, r24	; 1
	
	// Set 'led_2_pin' to low initially
	led_port_reg &= ~( 1 << led_2_pin );
 126:	82 b1       	in	r24, 0x02	; 2
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	82 b9       	out	0x02, r24	; 2
 12c:	08 95       	ret

0000012e <led_1_on>:
/**
 * @brief      Function to set LED 1 pin to high, hence turn on LED 1
 */
void led_1_on(void){
	// Turn on all LEDs
	led_port_reg |= (1 << led_1_pin);
 12e:	82 b1       	in	r24, 0x02	; 2
 130:	81 60       	ori	r24, 0x01	; 1
 132:	82 b9       	out	0x02, r24	; 2
 134:	08 95       	ret

00000136 <led_1_off>:
/**
 * @brief      Function to set LED 1 pin to low, hence turn off LED 1
 */
void led_1_off(void){
	// Turn off all LEDs
	led_port_reg &= ~(1 << led_1_pin);
 136:	82 b1       	in	r24, 0x02	; 2
 138:	8e 7f       	andi	r24, 0xFE	; 254
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	08 95       	ret

0000013e <led_2_on>:
/**
 * @brief      Function to set LED 2 pin to high, hence turn on LED 2
 */
void led_2_on(void){
	// Turn on all LEDs
	led_port_reg |= (1 << led_2_pin);
 13e:	82 b1       	in	r24, 0x02	; 2
 140:	82 60       	ori	r24, 0x02	; 2
 142:	82 b9       	out	0x02, r24	; 2
 144:	08 95       	ret

00000146 <led_2_off>:
/**
 * @brief      Function to set LED 2 pin to low, hence turn off LED 2
 */
void led_2_off(void){
	// Turn off all LEDs
	led_port_reg &= ~(1 << led_2_pin);
 146:	82 b1       	in	r24, 0x02	; 2
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	82 b9       	out	0x02, r24	; 2
 14c:	08 95       	ret

0000014e <main>:
//---------------------------------- MAIN ----------------------------------------------------------------

int main(void)
{
	// Initialize the necessary devices (Led, Toggle and push button switch) required for the experiment.
	toggle_and_push_button_switch_config();
 14e:	d5 df       	rcall	.-86     	; 0xfa <toggle_and_push_button_switch_config>
	led_pin_config();
 150:	e1 df       	rcall	.-62     	; 0x114 <led_pin_config>
 152:	78 9b       	sbis	0x0f, 0	; 15
    
    while (1) 
    {
		// If the push button Switch is NOT pressed
		if ((push_button_pin_reg & (1 << push_button_pin)) == (1 << push_button_pin)) {
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0x18>
 156:	87 ea       	ldi	r24, 0xA7	; 167
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	91 e6       	ldi	r25, 0x61	; 97
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xc>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x12>
 160:	00 00       	nop
			_delay_ms(100);
			led_1_off(); 			//Turn off LED 1
 162:	e9 df       	rcall	.-46     	; 0x136 <led_1_off>
 164:	07 c0       	rjmp	.+14     	; 0x174 <main+0x26>
 166:	87 ea       	ldi	r24, 0xA7	; 167
 168:	91 e6       	ldi	r25, 0x61	; 97
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x1c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x22>
 170:	00 00       	nop
		} 
		else {
			_delay_ms(100);
			led_1_on(); 			//Turn on LED 1
 172:	dd df       	rcall	.-70     	; 0x12e <led_1_on>
 174:	79 9b       	sbis	0x0f, 1	; 15
		}
		if ((toggle_button_pin_reg & (1 << toggle_button_pin)) == (1 << toggle_button_pin)) {
 176:	08 c0       	rjmp	.+16     	; 0x188 <main+0x3a>
 178:	87 ea       	ldi	r24, 0xA7	; 167
 17a:	91 e6       	ldi	r25, 0x61	; 97
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x2e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x34>
 182:	00 00       	nop
			_delay_ms(100);
			led_2_off(); 			//Turn off LED 2
 184:	e0 df       	rcall	.-64     	; 0x146 <led_2_off>
 186:	e5 cf       	rjmp	.-54     	; 0x152 <main+0x4>
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x3e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x44>
 192:	00 00       	nop
		}
		else {
			_delay_ms(100);
			led_2_on(); 			//Turn on LED 2
 194:	d4 df       	rcall	.-88     	; 0x13e <led_2_on>
 196:	dd cf       	rjmp	.-70     	; 0x152 <main+0x4>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
