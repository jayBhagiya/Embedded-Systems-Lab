
LCD_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080020e  0080020e  00000714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f0  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd6  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a1  00000000  00000000  00002bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000961  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e7       	ldi	r30, 0x72	; 114
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d2       	rcall	.+1222   	; 0x5e6 <main>
 120:	a6 c2       	rjmp	.+1356   	; 0x66e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 60       	ori	r24, 0x07	; 7
 128:	87 b9       	out	0x07, r24	; 7
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	87 b9       	out	0x07, r24	; 7
 130:	88 b1       	in	r24, 0x08	; 8
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 b9       	out	0x08, r24	; 8
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret

0000013e <lcd_set_4bit>:
 13e:	86 e6       	ldi	r24, 0x66	; 102
 140:	9e e0       	ldi	r25, 0x0E	; 14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x4>
 146:	00 00       	nop
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	88 b9       	out	0x08, r24	; 8
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	88 b9       	out	0x08, r24	; 8
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	88 b9       	out	0x08, r24	; 8
 158:	98 b1       	in	r25, 0x08	; 8
 15a:	94 60       	ori	r25, 0x04	; 4
 15c:	98 b9       	out	0x08, r25	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x24>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x2a>
 168:	00 00       	nop
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	9b 7f       	andi	r25, 0xFB	; 251
 16e:	98 b9       	out	0x08, r25	; 8
 170:	e6 e6       	ldi	r30, 0x66	; 102
 172:	fe e0       	ldi	r31, 0x0E	; 14
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x36>
 178:	00 00       	nop
 17a:	98 b1       	in	r25, 0x08	; 8
 17c:	9e 7f       	andi	r25, 0xFE	; 254
 17e:	98 b9       	out	0x08, r25	; 8
 180:	98 b1       	in	r25, 0x08	; 8
 182:	9d 7f       	andi	r25, 0xFD	; 253
 184:	98 b9       	out	0x08, r25	; 8
 186:	88 b9       	out	0x08, r24	; 8
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	94 60       	ori	r25, 0x04	; 4
 18c:	98 b9       	out	0x08, r25	; 8
 18e:	ef ef       	ldi	r30, 0xFF	; 255
 190:	f7 e4       	ldi	r31, 0x47	; 71
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x54>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_set_4bit+0x5a>
 198:	00 00       	nop
 19a:	98 b1       	in	r25, 0x08	; 8
 19c:	9b 7f       	andi	r25, 0xFB	; 251
 19e:	98 b9       	out	0x08, r25	; 8
 1a0:	e6 e6       	ldi	r30, 0x66	; 102
 1a2:	fe e0       	ldi	r31, 0x0E	; 14
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x66>
 1a8:	00 00       	nop
 1aa:	98 b1       	in	r25, 0x08	; 8
 1ac:	9e 7f       	andi	r25, 0xFE	; 254
 1ae:	98 b9       	out	0x08, r25	; 8
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9d 7f       	andi	r25, 0xFD	; 253
 1b4:	98 b9       	out	0x08, r25	; 8
 1b6:	88 b9       	out	0x08, r24	; 8
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	88 b9       	out	0x08, r24	; 8
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	97 e4       	ldi	r25, 0x47	; 71
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_set_4bit+0x84>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_set_4bit+0x8a>
 1c8:	00 00       	nop
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	8b 7f       	andi	r24, 0xFB	; 251
 1ce:	88 b9       	out	0x08, r24	; 8
 1d0:	e6 e6       	ldi	r30, 0x66	; 102
 1d2:	fe e0       	ldi	r31, 0x0E	; 14
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_set_4bit+0x96>
 1d8:	00 00       	nop
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	88 b9       	out	0x08, r24	; 8
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	88 b9       	out	0x08, r24	; 8
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	88 b1       	in	r24, 0x08	; 8
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	88 b9       	out	0x08, r24	; 8
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	97 e4       	ldi	r25, 0x47	; 71
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_set_4bit+0xb6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_set_4bit+0xbc>
 1fa:	00 00       	nop
 1fc:	88 b1       	in	r24, 0x08	; 8
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	88 b9       	out	0x08, r24	; 8
 202:	08 95       	ret

00000204 <lcd_wr_command>:
 204:	38 2f       	mov	r19, r24
 206:	30 7f       	andi	r19, 0xF0	; 240
 208:	28 b1       	in	r18, 0x08	; 8
 20a:	2f 70       	andi	r18, 0x0F	; 15
 20c:	28 b9       	out	0x08, r18	; 8
 20e:	98 b1       	in	r25, 0x08	; 8
 210:	93 2b       	or	r25, r19
 212:	98 b9       	out	0x08, r25	; 8
 214:	98 b1       	in	r25, 0x08	; 8
 216:	9e 7f       	andi	r25, 0xFE	; 254
 218:	98 b9       	out	0x08, r25	; 8
 21a:	98 b1       	in	r25, 0x08	; 8
 21c:	9d 7f       	andi	r25, 0xFD	; 253
 21e:	98 b9       	out	0x08, r25	; 8
 220:	98 b1       	in	r25, 0x08	; 8
 222:	94 60       	ori	r25, 0x04	; 4
 224:	98 b9       	out	0x08, r25	; 8
 226:	ef ef       	ldi	r30, 0xFF	; 255
 228:	f7 e4       	ldi	r31, 0x47	; 71
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_wr_command+0x26>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_wr_command+0x2c>
 230:	00 00       	nop
 232:	98 b1       	in	r25, 0x08	; 8
 234:	9b 7f       	andi	r25, 0xFB	; 251
 236:	98 b9       	out	0x08, r25	; 8
 238:	82 95       	swap	r24
 23a:	80 7f       	andi	r24, 0xF0	; 240
 23c:	98 b1       	in	r25, 0x08	; 8
 23e:	9f 70       	andi	r25, 0x0F	; 15
 240:	98 b9       	out	0x08, r25	; 8
 242:	98 b1       	in	r25, 0x08	; 8
 244:	89 2b       	or	r24, r25
 246:	88 b9       	out	0x08, r24	; 8
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	88 b1       	in	r24, 0x08	; 8
 250:	8d 7f       	andi	r24, 0xFD	; 253
 252:	88 b9       	out	0x08, r24	; 8
 254:	88 b1       	in	r24, 0x08	; 8
 256:	84 60       	ori	r24, 0x04	; 4
 258:	88 b9       	out	0x08, r24	; 8
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	97 e4       	ldi	r25, 0x47	; 71
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_wr_command+0x5a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_wr_command+0x60>
 264:	00 00       	nop
 266:	88 b1       	in	r24, 0x08	; 8
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	88 b9       	out	0x08, r24	; 8
 26c:	08 95       	ret

0000026e <lcd_init>:
 26e:	67 df       	rcall	.-306    	; 0x13e <lcd_set_4bit>
 270:	86 e6       	ldi	r24, 0x66	; 102
 272:	9e e0       	ldi	r25, 0x0E	; 14
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd_init+0x6>
 278:	00 00       	nop
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	c3 df       	rcall	.-122    	; 0x204 <lcd_wr_command>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	c1 df       	rcall	.-126    	; 0x204 <lcd_wr_command>
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	bf df       	rcall	.-130    	; 0x204 <lcd_wr_command>
 286:	8e e0       	ldi	r24, 0x0E	; 14
 288:	bd df       	rcall	.-134    	; 0x204 <lcd_wr_command>
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	bb cf       	rjmp	.-138    	; 0x204 <lcd_wr_command>
 28e:	08 95       	ret

00000290 <lcd_home>:
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	b8 cf       	rjmp	.-144    	; 0x204 <lcd_wr_command>
 294:	08 95       	ret

00000296 <lcd_cursor>:
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	69 f0       	breq	.+26     	; 0x2b4 <lcd_cursor+0x1e>
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <lcd_cursor+0xc>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	31 f0       	breq	.+12     	; 0x2ac <lcd_cursor+0x16>
 2a0:	08 95       	ret
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	59 f0       	breq	.+22     	; 0x2bc <lcd_cursor+0x26>
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2e>
 2aa:	08 95       	ret
 2ac:	8f e7       	ldi	r24, 0x7F	; 127
 2ae:	86 0f       	add	r24, r22
 2b0:	a9 cf       	rjmp	.-174    	; 0x204 <lcd_wr_command>
 2b2:	08 95       	ret
 2b4:	8f eb       	ldi	r24, 0xBF	; 191
 2b6:	86 0f       	add	r24, r22
 2b8:	a5 cf       	rjmp	.-182    	; 0x204 <lcd_wr_command>
 2ba:	08 95       	ret
 2bc:	83 e9       	ldi	r24, 0x93	; 147
 2be:	86 0f       	add	r24, r22
 2c0:	a1 cf       	rjmp	.-190    	; 0x204 <lcd_wr_command>
 2c2:	08 95       	ret
 2c4:	83 ed       	ldi	r24, 0xD3	; 211
 2c6:	86 0f       	add	r24, r22
 2c8:	9d cf       	rjmp	.-198    	; 0x204 <lcd_wr_command>
 2ca:	08 95       	ret

000002cc <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 2cc:	cf 93       	push	r28
 2ce:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 2d0:	e2 df       	rcall	.-60     	; 0x296 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
 2d2:	2c 2f       	mov	r18, r28
 2d4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_data_port_reg &= 0x0F;
 2d6:	98 b1       	in	r25, 0x08	; 8
 2d8:	9f 70       	andi	r25, 0x0F	; 15
 2da:	98 b9       	out	0x08, r25	; 8
	lcd_data_port_reg |= temp;
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	82 2b       	or	r24, r18
 2e0:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	88 b9       	out	0x08, r24	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2e8:	88 b1       	in	r24, 0x08	; 8
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2ee:	88 b1       	in	r24, 0x08	; 8
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	97 e4       	ldi	r25, 0x47	; 71
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_wr_char+0x2c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd_wr_char+0x32>
 2fe:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 300:	88 b1       	in	r24, 0x08	; 8
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	88 b9       	out	0x08, r24	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
 306:	c2 95       	swap	r28
 308:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_data_port_reg &= 0x0F;
 30a:	88 b1       	in	r24, 0x08	; 8
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 310:	88 b1       	in	r24, 0x08	; 8
 312:	c8 2b       	or	r28, r24
 314:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 316:	88 b1       	in	r24, 0x08	; 8
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	88 b9       	out	0x08, r24	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	8d 7f       	andi	r24, 0xFD	; 253
 320:	88 b9       	out	0x08, r24	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 322:	88 b1       	in	r24, 0x08	; 8
 324:	84 60       	ori	r24, 0x04	; 4
 326:	88 b9       	out	0x08, r24	; 8
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	97 e4       	ldi	r25, 0x47	; 71
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_wr_char+0x60>
 330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_wr_char+0x66>
 332:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 334:	88 b1       	in	r24, 0x08	; 8
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	88 b9       	out	0x08, r24	; 8
}
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	08 2f       	mov	r16, r24
 348:	16 2f       	mov	r17, r22
 34a:	ea 01       	movw	r28, r20
	while(*str != '\0')
 34c:	05 c0       	rjmp	.+10     	; 0x358 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
 34e:	61 2f       	mov	r22, r17
 350:	80 2f       	mov	r24, r16
 352:	bc df       	rcall	.-136    	; 0x2cc <lcd_wr_char>
		str++;
 354:	21 96       	adiw	r28, 0x01	; 1
		column+=1;
 356:	1f 5f       	subi	r17, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 358:	48 81       	ld	r20, Y
 35a:	41 11       	cpse	r20, r1
 35c:	f8 cf       	rjmp	.-16     	; 0x34e <lcd_string+0x10>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	08 95       	ret

00000368 <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	d8 2f       	mov	r29, r24
 376:	c6 2f       	mov	r28, r22
 378:	7a 01       	movw	r14, r20
 37a:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 37c:	8c df       	rcall	.-232    	; 0x296 <lcd_cursor>
	
	if (val < 0)
 37e:	ff 20       	and	r15, r15
 380:	4c f4       	brge	.+18     	; 0x394 <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 382:	f1 94       	neg	r15
 384:	e1 94       	neg	r14
 386:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	52 e0       	ldi	r21, 0x02	; 2
 38c:	6c 2f       	mov	r22, r28
 38e:	8d 2f       	mov	r24, r29
 390:	d6 df       	rcall	.-84     	; 0x33e <lcd_string>
		column+=1;
 392:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 394:	dd 23       	and	r29, r29
 396:	11 f0       	breq	.+4      	; 0x39c <lcd_numeric_value+0x34>
 398:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <lcd_numeric_value+0x38>
 39c:	79 df       	rcall	.-270    	; 0x290 <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <lcd_numeric_value+0x3e>
 3a0:	6c 2f       	mov	r22, r28
 3a2:	8d 2f       	mov	r24, r29
 3a4:	78 df       	rcall	.-272    	; 0x296 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 3a6:	05 30       	cpi	r16, 0x05	; 5
 3a8:	11 05       	cpc	r17, r1
	{
		million = val/10000+48;
 3aa:	89 f4       	brne	.+34     	; 0x3ce <lcd_numeric_value+0x66>
 3ac:	c7 01       	movw	r24, r14
 3ae:	60 e1       	ldi	r22, 0x10	; 16
 3b0:	77 e2       	ldi	r23, 0x27	; 39
 3b2:	27 d1       	rcall	.+590    	; 0x602 <__divmodhi4>
 3b4:	ab 01       	movw	r20, r22
 3b6:	40 5d       	subi	r20, 0xD0	; 208
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <__data_end>
 3be:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <__data_end+0x1>
		lcd_wr_char(row ,column, million);
 3c2:	6c 2f       	mov	r22, r28
 3c4:	8d 2f       	mov	r24, r29
 3c6:	82 df       	rcall	.-252    	; 0x2cc <lcd_wr_char>
		column+=1;
 3c8:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_numeric_value+0x68>
		val = 0 - val;
		lcd_string(row, column, "-");
		column+=1;
	}
		
	unsigned char flag = 0;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 3d0:	04 30       	cpi	r16, 0x04	; 4
 3d2:	11 05       	cpc	r17, r1
 3d4:	11 f0       	breq	.+4      	; 0x3da <lcd_numeric_value+0x72>
 3d6:	81 30       	cpi	r24, 0x01	; 1
	{
		temp = val/1000;
 3d8:	59 f5       	brne	.+86     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3da:	c7 01       	movw	r24, r14
 3dc:	68 ee       	ldi	r22, 0xE8	; 232
 3de:	73 e0       	ldi	r23, 0x03	; 3
 3e0:	10 d1       	rcall	.+544    	; 0x602 <__divmodhi4>
 3e2:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <temp+0x1>
 3e6:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <temp>
		thousand = temp%10 + 48;
 3ea:	9b 01       	movw	r18, r22
 3ec:	ad ec       	ldi	r26, 0xCD	; 205
 3ee:	bc ec       	ldi	r27, 0xCC	; 204
 3f0:	1b d1       	rcall	.+566    	; 0x628 <__umulhisi3>
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	96 95       	lsr	r25
 3f8:	87 95       	ror	r24
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	ac 01       	movw	r20, r24
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	84 0f       	add	r24, r20
 412:	95 1f       	adc	r25, r21
 414:	28 1b       	sub	r18, r24
 416:	39 0b       	sbc	r19, r25
 418:	a9 01       	movw	r20, r18
 41a:	40 5d       	subi	r20, 0xD0	; 208
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <thousand+0x1>
 422:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <thousand>
		lcd_wr_char(row, column, thousand);
 426:	6c 2f       	mov	r22, r28
 428:	8d 2f       	mov	r24, r29
 42a:	50 df       	rcall	.-352    	; 0x2cc <lcd_wr_char>
		column+=1;
 42c:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	03 30       	cpi	r16, 0x03	; 3
 432:	11 05       	cpc	r17, r1
 434:	11 f0       	breq	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	81 30       	cpi	r24, 0x01	; 1
	{
		temp = val/100;
 438:	59 f5       	brne	.+86     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 43a:	c7 01       	movw	r24, r14
 43c:	64 e6       	ldi	r22, 0x64	; 100
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	e0 d0       	rcall	.+448    	; 0x602 <__divmodhi4>
 442:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <temp+0x1>
 446:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <temp>
		hundred = temp%10 + 48;
 44a:	9b 01       	movw	r18, r22
 44c:	ad ec       	ldi	r26, 0xCD	; 205
 44e:	bc ec       	ldi	r27, 0xCC	; 204
 450:	eb d0       	rcall	.+470    	; 0x628 <__umulhisi3>
 452:	96 95       	lsr	r25
 454:	87 95       	ror	r24
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	ac 01       	movw	r20, r24
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	84 0f       	add	r24, r20
 472:	95 1f       	adc	r25, r21
 474:	28 1b       	sub	r18, r24
 476:	39 0b       	sbc	r19, r25
 478:	a9 01       	movw	r20, r18
 47a:	40 5d       	subi	r20, 0xD0	; 208
 47c:	5f 4f       	sbci	r21, 0xFF	; 255
 47e:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <hundred+0x1>
 482:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <hundred>
		lcd_wr_char(row, column, hundred);
 486:	6c 2f       	mov	r22, r28
 488:	8d 2f       	mov	r24, r29
		column+=1;
 48a:	20 df       	rcall	.-448    	; 0x2cc <lcd_wr_char>
		flag = 1;
 48c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(digits == 2 || flag == 1)
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	02 30       	cpi	r16, 0x02	; 2
 492:	11 05       	cpc	r17, r1
 494:	11 f0       	breq	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	{
		temp = val/10;
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	59 f5       	brne	.+86     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 49a:	c7 01       	movw	r24, r14
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	b0 d0       	rcall	.+352    	; 0x602 <__divmodhi4>
 4a2:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <temp+0x1>
 4a6:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <temp>
		tens = temp%10 + 48;
 4aa:	9b 01       	movw	r18, r22
 4ac:	ad ec       	ldi	r26, 0xCD	; 205
 4ae:	bc ec       	ldi	r27, 0xCC	; 204
 4b0:	bb d0       	rcall	.+374    	; 0x628 <__umulhisi3>
 4b2:	96 95       	lsr	r25
 4b4:	87 95       	ror	r24
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	96 95       	lsr	r25
 4bc:	87 95       	ror	r24
 4be:	ac 01       	movw	r20, r24
 4c0:	44 0f       	add	r20, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	84 0f       	add	r24, r20
 4d2:	95 1f       	adc	r25, r21
 4d4:	28 1b       	sub	r18, r24
 4d6:	39 0b       	sbc	r19, r25
 4d8:	a9 01       	movw	r20, r18
 4da:	40 5d       	subi	r20, 0xD0	; 208
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <tens+0x1>
 4e2:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <tens>
		lcd_wr_char(row, column, tens);
 4e6:	6c 2f       	mov	r22, r28
 4e8:	8d 2f       	mov	r24, r29
 4ea:	f0 de       	rcall	.-544    	; 0x2cc <lcd_wr_char>
		column+=1;
 4ec:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(digits == 1 || flag == 1)
 4f0:	01 30       	cpi	r16, 0x01	; 1
 4f2:	11 05       	cpc	r17, r1
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f6:	81 30       	cpi	r24, 0x01	; 1
	{
		unit = val%10 + 48;
 4f8:	79 f4       	brne	.+30     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 4fa:	c7 01       	movw	r24, r14
 4fc:	6a e0       	ldi	r22, 0x0A	; 10
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	80 d0       	rcall	.+256    	; 0x602 <__divmodhi4>
 502:	ac 01       	movw	r20, r24
 504:	40 5d       	subi	r20, 0xD0	; 208
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <unit>
 50c:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <unit+0x1>
		lcd_wr_char(row, column, unit);
 510:	6c 2f       	mov	r22, r28
 512:	8d 2f       	mov	r24, r29
 514:	db de       	rcall	.-586    	; 0x2cc <lcd_wr_char>
		column+=1;
 516:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(digits > 5)
 518:	06 30       	cpi	r16, 0x06	; 6
 51a:	11 05       	cpc	r17, r1
 51c:	24 f0       	brlt	.+8      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	{
		lcd_wr_char(row, column, 'E');
 51e:	45 e4       	ldi	r20, 0x45	; 69
 520:	6c 2f       	mov	r22, r28
 522:	8d 2f       	mov	r24, r29
 524:	d3 de       	rcall	.-602    	; 0x2cc <lcd_wr_char>
 526:	df 91       	pop	r29
		column+=1;
	}
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	08 95       	ret

00000534 <adc_port_config>:
/**
 * @brief      Function to make all ADC sensor pins as input and deactivate pull up for all pins
 */
void adc_port_config (void)
{
	current_sensor_ddr_reg	= 0x00;				// set PORTF direction as input
 534:	10 ba       	out	0x10, r1	; 16
	current_sensor_port_reg	= 0x00;				// set PORTF pins floating
 536:	11 ba       	out	0x11, r1	; 17
 538:	08 95       	ret

0000053a <adc_init>:
 */
void adc_init(){
	
	// enable ADC and pre-scalar = 64 (ADEN = 1, ADPS2 = 1, ADPS1 = 1, ADPS0 = 0)
	// and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1 << ADEN_bit) | (1 << ADPS2_bit) | (1 << ADPS1_bit) );
 53a:	ea e7       	ldi	r30, 0x7A	; 122
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	86 68       	ori	r24, 0x86	; 134
 542:	80 83       	st	Z, r24
	ADCSRA_reg	&= ~( (1 << ADSC_bit) | (1 << ADATE_bit) | (1 << ADIF_bit) | (1 << ADIE_bit) | (1 << ADPS0_bit) );
 544:	80 81       	ld	r24, Z
 546:	86 78       	andi	r24, 0x86	; 134
 548:	80 83       	st	Z, r24
	
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&= ~( (1 << ACME_bit) | (1 << MUX5_bit) | (1 << ADTS2_bit) | (1 << ADTS1_bit) | (1 << ADTS0_bit) );
 54a:	eb e7       	ldi	r30, 0x7B	; 123
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 7b       	andi	r24, 0xB0	; 176
 552:	80 83       	st	Z, r24
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and disable the channel selection bits MUX[4:0]
	ADMUX_reg	&= ~( (1 << REFS1_bit) | (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
 554:	ec e7       	ldi	r30, 0x7C	; 124
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	80 76       	andi	r24, 0x60	; 96
 55c:	80 83       	st	Z, r24
	ADMUX_reg	|= (1 << REFS0_bit);
 55e:	80 81       	ld	r24, Z
 560:	80 64       	ori	r24, 0x40	; 64
 562:	80 83       	st	Z, r24
	
	// In ADMUX, enable the ADLAR bit for 8-bit ADC result
	ADMUX_reg	|= (1 << ADLAR_bit);
 564:	80 81       	ld	r24, Z
 566:	80 62       	ori	r24, 0x20	; 32
 568:	80 83       	st	Z, r24
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|= ( 1 << ACD_bit );
 56a:	80 b7       	in	r24, 0x30	; 48
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	80 bf       	out	0x30, r24	; 48
 570:	08 95       	ret

00000572 <ADC_Conversion>:
unsigned char ADC_Conversion(unsigned char channel_num)
{
	unsigned char adc_8bit_data;
	
	// MUX[5:0] bits to select the ADC channel number
	if ( channel_num > 7 )
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	28 f0       	brcs	.+10     	; 0x580 <ADC_Conversion+0xe>
	{
		ADCSRB_reg |= ( 1 << MUX5_bit );					// set the MUX5 bit for selecting channel if its greater than 7
 576:	eb e7       	ldi	r30, 0x7B	; 123
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	90 81       	ld	r25, Z
 57c:	98 60       	ori	r25, 0x08	; 8
 57e:	90 83       	st	Z, r25
	}
	channel_num	= channel_num & 0x07;						// retain the last 3 bits from the variable for MUX[2:0] bits
 580:	87 70       	andi	r24, 0x07	; 7
	ADMUX_reg	= ( ADMUX_reg | channel_num );
 582:	ec e7       	ldi	r30, 0x7C	; 124
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	90 81       	ld	r25, Z
 588:	89 2b       	or	r24, r25
 58a:	80 83       	st	Z, r24
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg		|= ( 1 << ADSC_bit );
 58c:	ea e7       	ldi	r30, 0x7A	; 122
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	80 64       	ori	r24, 0x40	; 64
 594:	80 83       	st	Z, r24
	
	//Wait for ADC conversion to complete
	while( ( ADCSRA_reg & ( 1 << ADIF_bit ) ) == 0x00 );
 596:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 59a:	84 ff       	sbrs	r24, 4
 59c:	fc cf       	rjmp	.-8      	; 0x596 <ADC_Conversion+0x24>
	
	adc_8bit_data = ADCH_reg;
 59e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	
	// clear ADIF bit by writing 1 to it
	ADCSRA_reg		|= ( 1 << ADIF_bit );
 5a2:	ea e7       	ldi	r30, 0x7A	; 122
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	90 81       	ld	r25, Z
 5a8:	90 61       	ori	r25, 0x10	; 16
 5aa:	90 83       	st	Z, r25
	
	// clear the MUX5 bit
	ADCSRB_reg		&= ~( 1 << MUX5_bit );
 5ac:	eb e7       	ldi	r30, 0x7B	; 123
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	90 81       	ld	r25, Z
 5b2:	97 7f       	andi	r25, 0xF7	; 247
 5b4:	90 83       	st	Z, r25
	
	// clear the MUX[4:0] bits
	ADMUX_reg		&= ~( (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
 5b6:	ec e7       	ldi	r30, 0x7C	; 124
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	90 81       	ld	r25, Z
 5bc:	90 7e       	andi	r25, 0xE0	; 224
 5be:	90 83       	st	Z, r25
	
	return adc_8bit_data;
}
 5c0:	08 95       	ret

000005c2 <print_sensor>:
 * @param[in]  column LCD column 1 to 16
 * @param[in]  channel ADC channel number of sensor 0 to 15
 *
 */
void print_sensor(char row, char coloumn,unsigned char channel)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	c8 2f       	mov	r28, r24
 5c8:	d6 2f       	mov	r29, r22
 5ca:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 5cc:	d2 df       	rcall	.-92     	; 0x572 <ADC_Conversion>
 5ce:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <ADC_Value>
	lcd_numeric_value(row, coloumn, ADC_Value, 3);
 5d2:	48 2f       	mov	r20, r24
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	23 e0       	ldi	r18, 0x03	; 3
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	6d 2f       	mov	r22, r29
 5dc:	8c 2f       	mov	r24, r28
 5de:	c4 de       	rcall	.-632    	; 0x368 <lcd_numeric_value>
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <main>:
 * @details    First Initializes LCD and displays message on LCD
 */
int main(void) {
	
	//unsigned int value;
	adc_port_config();					// Initialize the ADC port
 5e6:	a6 df       	rcall	.-180    	; 0x534 <adc_port_config>
	adc_init();
 5e8:	a8 df       	rcall	.-176    	; 0x53a <adc_init>
	
	lcd_port_config();					// Initialize the LCD port
 5ea:	9c dd       	rcall	.-1224   	; 0x124 <lcd_port_config>
 5ec:	40 de       	rcall	.-896    	; 0x26e <lcd_init>
	lcd_init();							// Initialize the LCD
 5ee:	42 e0       	ldi	r20, 0x02	; 2
 5f0:	52 e0       	ldi	r21, 0x02	; 2
	
	lcd_string(1, 1, "ADC Value:");
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	a3 de       	rcall	.-698    	; 0x33e <lcd_string>
 5f8:	41 b3       	in	r20, 0x11	; 17
	
	while(1)
	{
		// Display text on LCD at specific location
		print_sensor(1, 11, current_sensor_port_reg);
 5fa:	6b e0       	ldi	r22, 0x0B	; 11
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	e1 df       	rcall	.-62     	; 0x5c2 <print_sensor>
 600:	fb cf       	rjmp	.-10     	; 0x5f8 <main+0x12>

00000602 <__divmodhi4>:
 602:	97 fb       	bst	r25, 7
 604:	07 2e       	mov	r0, r23
 606:	16 f4       	brtc	.+4      	; 0x60c <__divmodhi4+0xa>
 608:	00 94       	com	r0
 60a:	06 d0       	rcall	.+12     	; 0x618 <__divmodhi4_neg1>
 60c:	77 fd       	sbrc	r23, 7
 60e:	08 d0       	rcall	.+16     	; 0x620 <__divmodhi4_neg2>
 610:	1a d0       	rcall	.+52     	; 0x646 <__udivmodhi4>
 612:	07 fc       	sbrc	r0, 7
 614:	05 d0       	rcall	.+10     	; 0x620 <__divmodhi4_neg2>
 616:	3e f4       	brtc	.+14     	; 0x626 <__divmodhi4_exit>

00000618 <__divmodhi4_neg1>:
 618:	90 95       	com	r25
 61a:	81 95       	neg	r24
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__divmodhi4_neg2>:
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255

00000626 <__divmodhi4_exit>:
 626:	08 95       	ret

00000628 <__umulhisi3>:
 628:	a2 9f       	mul	r26, r18
 62a:	b0 01       	movw	r22, r0
 62c:	b3 9f       	mul	r27, r19
 62e:	c0 01       	movw	r24, r0
 630:	a3 9f       	mul	r26, r19
 632:	70 0d       	add	r23, r0
 634:	81 1d       	adc	r24, r1
 636:	11 24       	eor	r1, r1
 638:	91 1d       	adc	r25, r1
 63a:	b2 9f       	mul	r27, r18
 63c:	70 0d       	add	r23, r0
 63e:	81 1d       	adc	r24, r1
 640:	11 24       	eor	r1, r1
 642:	91 1d       	adc	r25, r1
 644:	08 95       	ret

00000646 <__udivmodhi4>:
 646:	aa 1b       	sub	r26, r26
 648:	bb 1b       	sub	r27, r27
 64a:	51 e1       	ldi	r21, 0x11	; 17
 64c:	07 c0       	rjmp	.+14     	; 0x65c <__udivmodhi4_ep>

0000064e <__udivmodhi4_loop>:
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	a6 17       	cp	r26, r22
 654:	b7 07       	cpc	r27, r23
 656:	10 f0       	brcs	.+4      	; 0x65c <__udivmodhi4_ep>
 658:	a6 1b       	sub	r26, r22
 65a:	b7 0b       	sbc	r27, r23

0000065c <__udivmodhi4_ep>:
 65c:	88 1f       	adc	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	5a 95       	dec	r21
 662:	a9 f7       	brne	.-22     	; 0x64e <__udivmodhi4_loop>
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	bc 01       	movw	r22, r24
 66a:	cd 01       	movw	r24, r26
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
