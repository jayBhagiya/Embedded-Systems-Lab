
led_pattern_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000659  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		for (int i=3; i>=0; i--)
  70:	23 e0       	ldi	r18, 0x03	; 3
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	23 c0       	rjmp	.+70     	; 0xbc <main+0x50>
		{
			PORTA |= (1 << i);
  76:	6b b3       	in	r22, 0x1b	; 27
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	ac 01       	movw	r20, r24
  7e:	02 2e       	mov	r0, r18
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
  82:	44 0f       	add	r20, r20
  84:	55 1f       	adc	r21, r21
  86:	0a 94       	dec	r0
  88:	e2 f7       	brpl	.-8      	; 0x82 <main+0x16>
  8a:	46 2b       	or	r20, r22
  8c:	4b bb       	out	0x1b, r20	; 27
			PORTA |= (1 << (7-i));
  8e:	6b b3       	in	r22, 0x1b	; 27
  90:	47 e0       	ldi	r20, 0x07	; 7
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	42 1b       	sub	r20, r18
  96:	53 0b       	sbc	r21, r19
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	4a 95       	dec	r20
  a0:	e2 f7       	brpl	.-8      	; 0x9a <main+0x2e>
  a2:	86 2b       	or	r24, r22
  a4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
int main(void)
{
    DDRA = 0xFF;
    while (1) 
    {
		for (int i=3; i>=0; i--)
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	31 09       	sbc	r19, r1
  bc:	33 23       	and	r19, r19
  be:	dc f6       	brge	.-74     	; 0x76 <main+0xa>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	26 c0       	rjmp	.+76     	; 0x112 <main+0xa6>
			PORTA |= (1 << (7-i));
			_delay_ms(500);
		}
		for (int i=0; i<4; i++)
		{
			PORTA &= ~(1 << i);
  c6:	5b b3       	in	r21, 0x1b	; 27
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	bc 01       	movw	r22, r24
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <main+0x6a>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <main+0x66>
  da:	46 2f       	mov	r20, r22
  dc:	40 95       	com	r20
  de:	45 23       	and	r20, r21
  e0:	4b bb       	out	0x1b, r20	; 27
			PORTA &= ~(1 << (7-i));
  e2:	4b b3       	in	r20, 0x1b	; 27
  e4:	67 e0       	ldi	r22, 0x07	; 7
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	62 1b       	sub	r22, r18
  ea:	73 0b       	sbc	r23, r19
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x86>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x82>
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	41 50       	subi	r20, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x96>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0xa0>
 10c:	00 00       	nop
		{
			PORTA |= (1 << i);
			PORTA |= (1 << (7-i));
			_delay_ms(500);
		}
		for (int i=0; i<4; i++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	24 30       	cpi	r18, 0x04	; 4
 114:	31 05       	cpc	r19, r1
 116:	bc f2       	brlt	.-82     	; 0xc6 <main+0x5a>
 118:	ab cf       	rjmp	.-170    	; 0x70 <main+0x4>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
